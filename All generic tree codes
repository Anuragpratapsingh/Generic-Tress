#include <iostream>
#include<bits/stdc++.h>
using namespace std;
template<typename T>
class TreeNode
{
    public:
    T data;
    vector<TreeNode<T>*>children;
    TreeNode(T data)
    {
        this->data=data;
    }
};

int TreeHeight(TreeNode<int>*root)
{
    //Edge case
    if(root==NULL)
    {
        return 0;
    }
    int height=0;;
    for(int i=0;i<root->children.size();i++)
    {
        int a=TreeHeight(root->children[i]);
        if(height<a)
        {
            height=a;
        }
    }
    //Root ki height add karke bhej denge
    return 1+height;
}
int LeafNodes(TreeNode<int>*root)
{
    //Edge case
    if(root==NULL)
    {
        return 0;
    }
    //Base case
    if(root->children.size()==0)
    {
        return 1;
    }
    int a=0;
    for(int i=0;i<root->children.size();i++)
    {
        a=a+LeafNodes(root->children[i]);
    }
    return a;
}
void Preorder(TreeNode<int>*root)
{
    if(root==NULL)
    {
        return;
    }
    cout<<root->data<<" ";
    for(int i=0;i<root->children.size();i++)
    {
        Preorder(root->children[i]);
    }
}
void Postorder(TreeNode<int>*root)
{
    if(root==NULL)
    {
        return;
    }
    for(int i=0;i<root->children.size();i++)
    {
        Postorder(root->children[i]);
    }
    cout<<root->data<<" ";
}
void NodeAtDepthK(TreeNode<int>*root,int k)
{
    //Edge case
    if(root==NULL)
    {
        return;
    }
    //Base case
    if(k==0)
    {
        cout<<root->data<<" ";
        return;
    }
    for(int i=0;i<root->children.size();i++)
    {
        NodeAtDepthK(root->children[i],k-1);
    }
    return;
}

TreeNode<int>*MaxNode(TreeNode<int>*root)
{
   if(root==NULL)
    {
        return NULL;
    }
    TreeNode<int>*max=root;
    for(int i=0;i<root->children.size();i++)
    {
        TreeNode<int>*temp=MaxNode(root->children[i]);
        if(temp->data>max->data)
        {
            max=temp;
        }
    }
    //Just see that this line after for loop will run for the leaf node the first time.
    return max;
}
int countNodes(TreeNode<int>*root)
{
    //Edge case
    if(root==NULL)
    {
        return 0;
    }
    int number=root->children.size();
    //Don't take static here
    int a=0;
    for(int i=0;i<number;i++)
    {
        a=a+countNodes(root->children[i]);
    }
    return 1+a;
}
int sumNodes(TreeNode<int>*root)
{
    //Edge case
    if(root==NULL)
    {
        return 0;
    }
    //Don't take static here
    int sum=root->data;
    for(int i=0;i<root->children.size();i++)
    {
        sum=sum+sumNodes(root->children[i]);
    }
    return sum;
}
//Level wise print
void printLevelwise(TreeNode<int>*root)
{
    queue<TreeNode<int>*>pending;
    pending.push(root);
    while(!pending.empty())
    {
        TreeNode<int>*front=pending.front();
        cout<<front->data<<":";
        pending.pop();
        for(int i=0;i<front->children.size();i++)
        {
            if(i==front->children.size()-1)
            {
                cout<<front->children[i]->data;
            }
            else
            {
               cout<<front->children[i]->data<<",";
            }
            pending.push(front->children[i]);
        }
        cout<<endl;
    }
}
//Take input level wise
TreeNode<int>*inputLevel()
{
    int a;
    cout<<"Enter the root node data"<<endl;
    cin>>a;
    TreeNode<int>*root=new TreeNode<int>(a);
    queue<TreeNode<int>*>PendingNodes;
    //queue ke andar woh nodes jinka children haven't asked abhi tak
    PendingNodes.push(root);
    while(!PendingNodes.empty())
    {
        TreeNode<int>*front=PendingNodes.front();
        PendingNodes.pop();
        cout<<"Enter number of children of "<<front->data<<endl;
        int number;
        cin>>number;
        for(int i=0;i<number;i++)
        {
            cout<<"Enter the "<<i<<" children of "<<front->data<<endl;
            int childData;
            cin>>childData;
            TreeNode<int>*child=new TreeNode<int>(childData);
            front->children.push_back(child);
            PendingNodes.push(child);
        }
    }
    return root;
}
//Recursively print
void printTree(TreeNode<int>*root)
{
    cout<<root->data<<":"<<" ";
    for(int i=0;i<root->children.size();i++)
    {
        cout<<root->children[i]->data<<",";
    }
    cout<<endl;
    for(int i=0;i<root->children.size();i++)
    {
        printTree(root->children[i]);
    }
}
int main()
{
   TreeNode<int>*root=inputLevel();
   //printTree(root);
  // printLevelwise(root);
   /*cout<<countNodes(root)<<endl;
   cout<<sumNodes(root)<<endl;
   */
  /* TreeNode<int>*answer=MaxNode(root);
   cout<<answer->data<<endl;
   */
   //cout<<LeafNodes(root);
   /*cout<<"Enter the value of k"<<endl;
   int k;
   cin>>k;
   NodeAtDepthK(root,k);
   */
   Preorder(root);
   cout<<endl;
   Postorder(root);
    //Dynamically hi banaenge
    /*
    TreeNode<int>*root=new TreeNode<int>(1);
    TreeNode<int>*node1=new TreeNode<int>(2);
    TreeNode<int>*node2=new TreeNode<int>(3);
    root->children.push_back(node1);
    root->children.push_back(node2);
    printTree(root);
    */
/*    1
     / \
    2   3
    Made a simple tree like this
    */
}

